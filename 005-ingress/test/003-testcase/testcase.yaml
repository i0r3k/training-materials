apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: ingress-pipy-testcase
  name: ingress-testcase
---
apiVersion: v1
data:
  config.js: |-
    pipy()
      .listen(os.env.INGRESS_TESTCASE_PORT || 6000)
      .decodeHttpRequest()
      .replaceMessage(new Message(os.env.INGRESS_TESTCASE_MSG || os.env.HOSTNAME))
      .encodeHttpResponse()
kind: ConfigMap
metadata:
  name: ingress-testcase-cfg
  namespace: ingress-testcase
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-001
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-001
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-002
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-002
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-003
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-003
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-004
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-004
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-005
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-005
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-006
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-006
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-007
  namespace: ingress-testcase
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: pipy
  selector:
    app: service-007
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-001
  namespace: ingress-testcase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-001
  template:
    metadata:
      labels:
        app: service-001
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-002
  namespace: ingress-testcase
spec:
  replicas: 2
  selector:
    matchLabels:
      app: service-002
  template:
    metadata:
      labels:
        app: service-002
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-003
  namespace: ingress-testcase
spec:
  replicas: 3
  selector:
    matchLabels:
      app: service-003
  template:
    metadata:
      labels:
        app: service-003
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-004
  namespace: ingress-testcase
spec:
  replicas: 4
  selector:
    matchLabels:
      app: service-004
  template:
    metadata:
      labels:
        app: service-004
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-005
  namespace: ingress-testcase
spec:
  replicas: 3
  selector:
    matchLabels:
      app: service-005
  template:
    metadata:
      labels:
        app: service-005
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-006
  namespace: ingress-testcase
spec:
  replicas: 2
  selector:
    matchLabels:
      app: service-006
  template:
    metadata:
      labels:
        app: service-006
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-pipy-testcase
  name: service-007
  namespace: ingress-testcase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-007
  template:
    metadata:
      labels:
        app: service-007
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/pipy /config/config.js --reuse-port --log-level=debug
        command:
        - /bin/sh
        image: flomesh/pipy-pjs:latest
        name: pipy
        ports:
        - containerPort: 6000
          name: pipy
        volumeMounts:
        - mountPath: /config
          name: cfg
      volumes:
      - configMap:
          name: ingress-testcase-cfg
        name: cfg
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-pipy-testcases
  namespace: ingress-testcase
spec:
  ingressClassName: pipy
  rules:
  - http:
      paths:
      - backend:
          service:
            name: service-001
            port:
              number: 80
        path: /service1
        pathType: Prefix
  - host: foo.bar.com
    http:
      paths:
      - backend:
          service:
            name: service-002
            port:
              number: 80
        path: /foo
        pathType: Prefix
      - backend:
          service:
            name: service-003
            port:
              number: 80
        path: /bar
        pathType: Prefix
  - host: '*.foo.com'
    http:
      paths:
      - backend:
          service:
            name: service-004
            port:
              number: 80
        path: /foo
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
  name: pipy
spec:
  controller: flomesh.io/ingress-pipy
